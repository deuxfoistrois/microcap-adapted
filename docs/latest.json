<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Micro-Cap Portfolio Dashboard</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 3px solid #667eea;
            padding-bottom: 20px;
        }
        
        .header h1 {
            color: #2c3e50;
            margin: 0;
            font-size: 2.5em;
            font-weight: 700;
        }
        
        .header .subtitle {
            color: #7f8c8d;
            font-size: 1.2em;
            margin-top: 10px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            border-left: 5px solid #667eea;
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-card h3 {
            margin: 0 0 10px 0;
            color: #2c3e50;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .stat-card .value {
            font-size: 2em;
            font-weight: bold;
            color: #27ae60;
        }
        
        .negative {
            color: #e74c3c !important;
        }
        
        .positions-table {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            margin-bottom: 20px;
        }
        
        .table-header {
            background: #667eea;
            color: white;
            padding: 15px 20px;
            font-weight: bold;
            font-size: 1.1em;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 12px 20px;
            text-align: left;
            border-bottom: 1px solid #ecf0f1;
        }
        
        th {
            background: #f8f9fa;
            font-weight: 600;
            color: #2c3e50;
        }
        
        .ticker {
            font-weight: bold;
            color: #2980b9;
        }
        
        .positive {
            color: #27ae60;
            font-weight: bold;
        }
        
        .footer {
            text-align: center;
            color: #7f8c8d;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #ecf0f1;
        }
        
        .last-updated {
            background: #3498db;
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            display: inline-block;
            margin-bottom: 20px;
        }
        
        .challenge-progress {
            background: linear-gradient(90deg, #667eea, #764ba2);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        
        .progress-bar {
            background: rgba(255,255,255,0.3);
            height: 10px;
            border-radius: 5px;
            margin: 10px 0;
            overflow: hidden;
        }
        
        .progress-fill {
            background: #27ae60;
            height: 100%;
            transition: width 0.3s ease;
        }
        
        .trade-alert {
            background: #2ecc71;
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            font-weight: bold;
            text-align: center;
        }
        
        .cash-row {
            background: #f1f2f6;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸš€ Micro-Cap Portfolio Challenge</h1>
            <div class="subtitle">30-Day Trading Experiment | Tactical Rotation Strategy</div>
        </div>
        
        <div class="last-updated">
            ðŸ“… Last Updated: <span id="last-update">Loading...</span>
        </div>
        
        <div id="trade-alert" class="trade-alert" style="display: none;">
            <span id="trade-message"></span>
        </div>
        
        <div class="challenge-progress">
            <h3>Challenge Progress</h3>
            <div>Day <span id="day-number">--</span> of 30 | <span id="days-remaining">--</span> days remaining</div>
            <div class="progress-bar">
                <div class="progress-fill" id="progress-bar" style="width: 0%"></div>
            </div>
        </div>
        
        <div class="stats-grid">
            <div class="stat-card">
                <h3>Current Value</h3>
                <div class="value" id="current-value">$0.00</div>
            </div>
            <div class="stat-card">
                <h3>Total Return</h3>
                <div class="value" id="total-return">0.00%</div>
            </div>
            <div class="stat-card">
                <h3>Daily Change</h3>
                <div class="value" id="daily-change">0.00%</div>
            </div>
            <div class="stat-card">
                <h3>Strategy</h3>
                <div class="value" style="font-size: 1.2em;">TACTICAL</div>
            </div>
        </div>
        
        <div class="positions-table">
            <div class="table-header">ðŸ“Š Current Positions</div>
            <table>
                <thead>
                    <tr>
                        <th>Ticker</th>
                        <th>Company</th>
                        <th>Shares</th>
                        <th>Current Price</th>
                        <th>Position Value</th>
                        <th>Allocation</th>
                    </tr>
                </thead>
                <tbody id="positions-table">
                    <tr>
                        <td colspan="6" style="text-align: center; padding: 40px;">Loading portfolio data...</td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <div class="footer">
            <p>ðŸŽ¯ Micro-Cap Portfolio Challenge | Active Tactical Management</p>
            <p>Strategy: Momentum rotation into SERV (Robotics), MYOMO (Medical), CABA (Biotech)</p>
        </div>
    </div>

    <script>
        const companyNames = {
            'SERV': 'Serve Robotics',
            'MYOMO': 'Myomo Inc',
            'CABA': 'Cabaletta Bio',
            'ARQ': 'Arq Inc',
            'UPXI': 'Upexi Inc',
            'GEVO': 'Gevo Inc',
            'FEIM': 'Frequency Electronics'
        };

        async function loadPortfolioData() {
            try {
                // Try multiple paths to find the JSON file
                const possiblePaths = [
                    './latest.json',
                    'latest.json',
                    'https://raw.githubusercontent.com/deuxfoistrois/microcap-adapted/refs/heads/main/docs/latest.json'
                ];
                
                let data = null;
                let loadedFrom = '';
                
                for (const path of possiblePaths) {
                    try {
                        console.log(`Trying to load from: ${path}`);
                        const response = await fetch(path);
                        if (response.ok) {
                            data = await response.json();
                            loadedFrom = path;
                            console.log(`Successfully loaded from: ${path}`);
                            break;
                        }
                    } catch (e) {
                        console.log(`Failed to load from ${path}: ${e.message}`);
                        continue;
                    }
                }
                
                if (!data) {
                    throw new Error('Could not load data from any path');
                }
                
                // Update last updated time
                document.getElementById('last-update').textContent = data.date || 'Unknown';
                
                // Show trade execution if present
                if (data.actions) {
                    const alertDiv = document.getElementById('trade-alert');
                    const messageSpan = document.getElementById('trade-message');
                    messageSpan.textContent = Array.isArray(data.actions) ? data.actions.join(', ') : data.actions;
                    alertDiv.style.display = 'block';
                }
                
                // Calculate metrics
                const initialValue = 995.74;
                const currentValue = parseFloat(data.total_value) || 0;
                const totalReturn = currentValue > 0 ? ((currentValue - initialValue) / initialValue * 100) : 0;
                const cash = parseFloat(data.cash) || 0;
                
                // Update summary stats
                document.getElementById('current-value').textContent = `$${currentValue.toLocaleString('en-US', {minimumFractionDigits: 2})}`;
                
                const returnElement = document.getElementById('total-return');
                returnElement.textContent = `${totalReturn.toFixed(2)}%`;
                returnElement.className = totalReturn >= 0 ? 'value positive' : 'value negative';
                
                // Daily change
                let dailyChangeText = "No Change";
                let dailyChangeClass = "value";
                
                if (data.daily_changes && data.daily_changes.portfolio) {
                    const dailyChangePct = data.daily_changes.portfolio.total_change_pct || 0;
                    dailyChangeText = `${dailyChangePct >= 0 ? '+' : ''}${dailyChangePct.toFixed(2)}%`;
                    dailyChangeClass = dailyChangePct >= 0 ? 'value positive' : 'value negative';
                }
                
                const dailyElement = document.getElementById('daily-change');
                dailyElement.textContent = dailyChangeText;
                dailyElement.className = dailyChangeClass;
                
                // Challenge progress
                const startDate = new Date('2025-08-08');
                const currentDate = new Date(data.date);
                const totalDays = 30;
                const daysElapsed = Math.floor((currentDate - startDate) / (1000 * 60 * 60 * 24));
                const daysRemaining = Math.max(0, totalDays - daysElapsed);
                const progressPercent = (daysElapsed / totalDays) * 100;
                
                document.getElementById('day-number').textContent = daysElapsed + 1;
                document.getElementById('days-remaining').textContent = daysRemaining;
                document.getElementById('progress-bar').style.width = `${Math.min(progressPercent, 100)}%`;
                
                // Update positions table
                const tableBody = document.getElementById('positions-table');
                tableBody.innerHTML = '';
                
                let hasPositions = false;
                
                // Add stock positions
                if (data.quantities && Object.keys(data.quantities).length > 0) {
                    Object.keys(data.quantities).forEach(symbol => {
                        const shares = data.quantities[symbol];
                        const price = data.prices ? data.prices[symbol] : null;
                        const value = data.values ? parseFloat(data.values[symbol]) || 0 : 0;
                        
                        if (shares > 0 && price) {
                            hasPositions = true;
                            const allocation = currentValue > 0 ? (value / currentValue) * 100 : 0;
                            const companyName = companyNames[symbol] || symbol;
                            
                            const row = tableBody.insertRow();
                            row.innerHTML = `
                                <td class="ticker">${symbol}</td>
                                <td>${companyName}</td>
                                <td>${shares.toLocaleString()}</td>
                                <td>$${price.toFixed(4)}</td>
                                <td>$${value.toLocaleString('en-US', {minimumFractionDigits: 2})}</td>
                                <td>${allocation.toFixed(1)}%</td>
                            `;
                        }
                    });
                }
                
                // Add cash row if there's cash
                if (cash > 0) {
                    hasPositions = true;
                    const cashAllocation = currentValue > 0 ? (cash / currentValue) * 100 : 0;
                    const cashRow = tableBody.insertRow();
                    cashRow.className = 'cash-row';
                    cashRow.innerHTML = `
                        <td class="ticker">ðŸ’µ CASH</td>
                        <td>Cash Position</td>
                        <td>-</td>
                        <td>$1.0000</td>
                        <td>$${cash.toLocaleString('en-US', {minimumFractionDigits: 2})}</td>
                        <td>${cashAllocation.toFixed(1)}%</td>
                    `;
                }
                
                // If no positions, show message
                if (!hasPositions) {
                    const emptyRow = tableBody.insertRow();
                    emptyRow.innerHTML = `<td colspan="6" style="text-align: center; padding: 40px;">
                        No positions found. Data loaded from: ${loadedFrom}
                    </td>`;
                }
                
            } catch (error) {
                console.error('Failed to load portfolio data:', error);
                document.getElementById('positions-table').innerHTML = 
                    `<tr><td colspan="6" style="text-align: center; color: #e74c3c;">
                        Failed to load data: ${error.message}<br>
                        <small>Check browser console for details</small>
                    </td></tr>`;
            }
        }
        
        // Load data on page load
        loadPortfolioData();
        
        // Refresh every 30 seconds for testing
        setInterval(loadPortfolioData, 30000);
    </script>
</body>
</html>
